\documentclass{report}
\setcounter{chapter}{0}
\usepackage{graphicx}
%Makes it write "Part" instead of "Chapter" at the beginning of each Chapter
\renewcommand{\chaptername}{Part} 

\begin{document}
\title{CS2006 --- \emph{Core War}}
\author{Chengyi Lin, Ross Apted and Ben Lovell}

\maketitle
\tableofcontents

\chapter{Running instructions}
	\paragraph{}In order to run, run the executable ./Main [warrior 1] [warrior 2] file, which takes 2 arguments for two warrior files.

\chapter{Introduction}
	\section{Aim}
		\paragraph{}The aim of this Project is to implement the programming game 'Core War' in Haskell. The core war program includes a virtual machine, which executes a collection of Redcode programmes. A parser for the Redcode language, which translates a text string, read from file into a Redcode program. The program must also use a visualizer, which show the contents of the virtual machine’s memory graphically. 
	\section{Requirements:}
		\subsection*{Primary requirements}
			\begin{itemize}
				\item Implementing step�, which executes each instruction in the virtual machine. --- Done
				\item Implementing drawSystem in Display.hs which draws a visual representation of the core contents. ---Done
				\item Implementing parsers to convert Strings to instructions. ---Done
				\item Extend main so that it reads two files from the command line, parses them, adds them to the core
and executes the warriors against each other. ---Done
			\end{itemize}
			\paragraph{}Other things for the project were also tackled:
			\subsection*{Secondary requirements}
			\begin{itemize}
				\item Extend addWarrior so that it adds the warrior to a random location in the core. You will need to make sure that it does not overlap with another warrior. ---Done
			\end{itemize}

\chapter{Description}
	\paragraph{}The program was separated into logically separate parts. This was to allow modularity in the scraping part and the user interface part. 
	\paragraph{}On the one hand, there was the scraping part. This was modularised by using abstract classes and 
		\section{VM.hs}
			\paragraph{}Step’ executes instructions in the virtual machine, there is a match for each instruction that program could except. Each match takes pc which is the current memory location as a parameter.  Absolute is used to calculate the destination location. The match then obtains the content in the destination, the destination,  is then updated depending on the instruction. An example update is that of the ADD instruction, in this case the a-field of the current location is added to the b-filed of the destination location and then is stored in the b-filed of the destination location.
		\section{Parsing.hs}
			\paragraph{}The job of the parser was to take a string with a valid Redcode program and to return a set of instructions in the form of Redcode Loc's. In order to this, the Parsing module provided was used, and Haskell code was used to implement a grammar. This grammar was the following:
			\begin{verbatim}
			Program ::= Statement (Program | Empty)
			Statement ::= Comment | Instruction
			Comment ::= ; Line
			Line ::= "\n"
			Instruction ::= Command Field Field
			Command ::= DAT | MOV | NOP
					   | ADD | SUB | MUL | DIV
					   | MOD | JMP | JMZ | JMN
					   | DJN | SEQ | SNE | SLT
			Field ::= Immediate | IndirectA | IndirectB | Address
			Address ::= Int
			Immediate ::= # Int
			IndirectA ::= $ Int
			IndirectB ::= @ Int
			\end{verbatim}
			\paragraph{}As a result, there is a program function that takes a statement and possible a list of more program, or just returns the original statement in a list. Originally, this called a command, which then passed to a massive list of functions each checking for the right string and getting two fields. However, this rather ridiculous, and so all of the commands were moved into a massive list of pairs containing an instruction and a string representation of that instruction, and a new command function that takes an instruction and a string representation and returns a Parser Loc data type. 
			\paragraph{}The function parseCommands takes this and maps it over the entire list of tuples, which is then passed to a fold function folds from the right using the monadplus or function to simulate the ``Command'' part of the grammar. This was then used in the statement. These all relied on fields, which simply get a char match for a modifier (such as `#') and an int.
		\section{Display.hs}
			\paragraph{}In display.hs we implemented drawSystem and two help functions: check and draw. Check is used to check each instruction and depending on the instruction, it will draw the 10*10 polygon with different color for each memory location. Draw is used to help check to render the polygon, the color of this polygon will be decided in check function. drawSystem also draws the text for background.
		\section{Main.hs}
			\paragraph{}In main.hs getArgs is used to get the list of arguments which contains the file names of the warriors. The eval function in Grammar.hs  is then used to parse the file and return the list of instructions. The instruction list is now used to create the warrior and add it to memory.
		\section{Redcode.hs}
			\paragraph{}In Redcode,hs the addWarrior function has been modified, to allow a warrior to be added to a random location. A check is made to make sure that a warrior is not added to a memory location in which another warrior already exists. A randomInt function was written to generate a random number in the desired range. This is then used to place the warrior.

\chapter{Testing}
	\section{How we Tested}
		\paragraph{}
Used command line to run program tying all possible, cases and took screen shots.
	\section{Tests}
		\begin{itemize}
			\item Basic working, can load two warriors as arguments from command line and run them --- Passed \newline \newline \includegraphics[height=90mm]{1}
			\item Run the given test-state which contains two warriors: dwarf and imp, dwarf win --- Passed  \newline \newline \includegraphics[height=90mm]{2}
			\item Add warriors to random locations --- Passed \newline \newline \includegraphics[height=90mm]{3_1} \newline \newline \includegraphics[height=90mm]{3_2}
			\item Never set two warriors to same location (Test by setting the core size to 2, and run program several times, and see if any errors happen) --- Passed \newline \newline \includegraphics[height=90mm]{4}
			


	
\chapter{Conclusion}
	\paragraph{} We successfully implemented the core war game using Haskell. We worked as a team to achieve all the basic requirements. Fully implementing the virtual Machine, display and the parser. We also achieved some additional requirements such as extended Virtual Machine instruction set and adding labels.  

			
			
\end{itemize}

\end{document}
